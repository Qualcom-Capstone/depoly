version: "3.9"

services:
  mysqldb:
    image: mysql:latest
    container_name: mysqldb
    environment:
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
    ports:
      - "3306:3306"
    networks:
      - app-network

  backend:
    image: ${DOCKER_USERNAME}/${DOCKER_IMAGE_NAME}:latest
    container_name: backend
    volumes:
      - /home/ubuntu/app/secrets/firebase-credentials.json:/app/secrets/firebase-credentials.json:ro
    environment:
      - DJANGO_SETTINGS_MODULE=backend.settings.prod
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - SECRET_KEY=${SECRET_KEY}
      - GOOGLE_APPLICATION_CREDENTIALS=/app/secrets/firebase-credentials.json
      - AWS_ACCESS_KEY=${AWS_ACCESS_KEY}
      - AWS_SECRET_KEY=${AWS_SECRET_KEY}
      - AWS_S3_BUCKET_NAME=${AWS_S3_BUCKET_NAME}
      - AWS_S3_REGION=${AWS_S3_REGION}

    command: >
      bash -c "python wait_mysql.py &&
      python manage.py migrate &&
      exec gunicorn backend.wsgi:application --bind 0.0.0.0:8000 --workers=4 --threads=2"
    depends_on:
      - mysqldb
#    labels:
#      - "traefik.enable=true"
#      - "traefik.http.routers.backend.rule=Host(`api.localhost`)"
#      - "traefik.http.services.backend.loadbalancer.server.port=8000"
    networks:
      - app-network

  rabbitmq:
    image: "rabbitmq:3.13-management"
    container_name: rabbitmq
    environment:
      - CELERY_BROKER_URL=amqp://guest:guest@rabbitmq:5672//
      - RABBITMQ_USER=${RABBITMQ_USER}
      - RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD}
    ports:
      # Expose the port for the worker to add/get tasks
      - 5672:5672
      # OPTIONAL: Expose the GUI port
      - 15672:15672
    depends_on:
      - backend
    restart: always
    tty: true   # restart: unless-stopped??
    expose:
      - 5672

  celery_worker:
    image: ${DOCKER_USERNAME}/${DOCKER_IMAGE_NAME}:latest
    container_name: celery_worker
    #    command: sh -c "celery -A backend worker --loglevel=info"
    command: celery -A backend worker --concurrency=4 --loglevel=info
    environment:
      - CELERY_BROKER_URL=amqp://guest:guest@rabbitmq:5672//
      - DJANGO_SETTINGS_MODULE=backend.settings.prod
    depends_on:
      - rabbitmq
      - backend
    restart: always
    tty: true

  celery_worker_dlq:
    image: ${DOCKER_USERNAME}/${DOCKER_IMAGE_NAME}:latest
    container_name: celery_worker_dlq
    command: celery -A backend worker --loglevel=info -Q dlq_notify_queue
    environment:
      - CELERY_BROKER_URL=amqp://guest:guest@rabbitmq:5672//
      - DJANGO_SETTINGS_MODULE=backend.settings.prod
    depends_on:
      - rabbitmq
      - backend
    restart: always
    tty: true

  celery_beat:
    image: ${DOCKER_USERNAME}/${DOCKER_IMAGE_NAME}:latest
    container_name: celery_beat
    command: sh -c "celery -A backend beat --loglevel=info"
    environment:
      - CELERY_BROKER_URL=amqp://guest:guest@rabbitmq:5672//
      - DJANGO_SETTINGS_MODULE=backend.settings.prod
    depends_on:
      - rabbitmq
      - backend
    restart: always
    tty: true

  flower:
    image: mher/flower
    container_name: flower
    environment:
      - CELERY_BROKER_URL=amqp://guest:guest@rabbitmq:5672/
      - TZ=Asia/Seoul
    ports:
      - '5555:5555'
    depends_on:
      - rabbitmq
      - celery_worker
      - celery_beat

networks:
  app-network:
    external: true
